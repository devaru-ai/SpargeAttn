import os
from itertools import product

# Fixed parameters
CTA_Q = 64
CTA_K = 128
NUM_THREADS = 128
fuse_v_scale = True

# Swept parameters
head_dims = [64, 128]
qk_quant_grans = [1, 2, 3]
pv_threshold_modes = [0, 1]
dtypes_out = ["half", "nv_bfloat16"]
is_causals = [True, False]
return_pv_counts = [False, True]

# Output directory
output_dir = os.path.dirname(os.path.abspath(__file__))
script_name = os.path.basename(__file__)
header = f'// this file is automatically generated by running `python {script_name}`\n#include "../qk_int_sv_f8_cuda_sm90.cuh"\n'

def bool_to_int(b):
    return "1" if b else "0"

# Function parameter list
param_list = (
    "  int8_t* Q, int8_t* K, __nv_fp8_e4m3* V, {dtype_out}* O,\n"
    "  int32_t* PV_Count, int32_t *__restrict__ Lut, int32_t *__restrict__ Valid_Block_Num, float *__restrict__ PV_Threshold,\n"
    "  float* Q_scale, float* K_scale, float* V_scale,\n"
    "  const uint32_t batch_size, const uint32_t qo_len, const uint32_t kv_len, const uint32_t padded_kv_len, const uint32_t num_qo_heads, const uint32_t num_kv_heads,\n"
    "  const uint32_t stride_bz_q, const uint32_t stride_seq_q, const uint32_t stride_h_q,\n"
    "  const uint32_t stride_bz_k, const uint32_t stride_seq_k, const uint32_t stride_h_k,\n"
    "  const uint32_t stride_bz_v, const uint32_t stride_h_v, const uint32_t stride_d_v,\n"
    "  const uint32_t stride_bz_o, const uint32_t stride_seq_o, const uint32_t stride_h_o,\n"
    "  float sm_scale\n"
)

# Generate combinations
for hd, qkg, pv_mode, dtype_out, causal, ret_pv_count in product(
        head_dims, qk_quant_grans, pv_threshold_modes, dtypes_out, is_causals, return_pv_counts):
    if ret_pv_count and pv_mode == 0:
        continue

    filename = (
        f"inst_sm90_ctaq{CTA_Q}_ctak{CTA_K}_nt{NUM_THREADS}"
        f"_hd{hd}_qkg{qkg}_pvth{pv_mode}_o{dtype_out}"
        f"_causal{bool_to_int(causal)}_fv{bool_to_int(fuse_v_scale)}"
        f"_retpv{bool_to_int(ret_pv_count)}.cu"
    )
    filepath = os.path.join(output_dir, filename)

    instantiation = (
        f"template void SpargeAttentionSM90Dispatched<"
        f"{CTA_Q}, {CTA_K}, {NUM_THREADS}, {hd}, {qkg}, {pv_mode}, "
        f"{dtype_out}, {str(causal).lower()}, {str(fuse_v_scale).lower()}, {str(ret_pv_count).lower()}"
        f">(\n{param_list.format(dtype_out=dtype_out)});"
    )

    with open(filepath, "w") as f:
        f.write(header)
        f.write(instantiation + "\n")

print(f"Generated {len(os.listdir(output_dir))} instantiations in '{output_dir}'")
